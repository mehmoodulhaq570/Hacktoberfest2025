#include <iostream>
#include <vector>
#include <climits>
using namespace std;

/*
    Bellman-Ford Algorithm
    ----------------------
    Finds shortest paths from a single source to all vertices,
    even with negative edge weights (but no negative cycles).

    Time Complexity: O(V * E)
*/

struct Edge {
    int u, v, w;
};

void bellmanFord(int vertices, int edges, vector<Edge>& graph, int source) {
    vector<int> dist(vertices, INT_MAX);
    dist[source] = 0;

    // Relax all edges |V| - 1 times
    for (int i = 1; i <= vertices - 1; i++) {
        for (auto& edge : graph) {
            if (dist[edge.u] != INT_MAX && dist[edge.u] + edge.w < dist[edge.v]) {
                dist[edge.v] = dist[edge.u] + edge.w;
            }
        }
    }

    // Check for negative weight cycles
    for (auto& edge : graph) {
        if (dist[edge.u] != INT_MAX && dist[edge.u] + edge.w < dist[edge.v]) {
            cout << "❌ Graph contains a negative weight cycle!\n";
            return;
        }
    }

    // Print results
    cout << "\nVertex\tDistance from Source (" << source << ")\n";
    for (int i = 0; i < vertices; i++) {
        cout << i << "\t\t" << (dist[i] == INT_MAX ? -1 : dist[i]) << endl;
    }
}

int main() {
    int vertices, edges;
    cout << "Enter number of vertices and edges: ";
    cin >> vertices >> edges;

    vector<Edge> graph(edges);
    cout << "Enter edges (u v w):\n";
    for (int i = 0; i < edges; i++) {
        cin >> graph[i].u >> graph[i].v >> graph[i].w;
    }

    int source;
    cout << "Enter source vertex: ";
    cin >> source;

    bellmanFord(vertices, edges, graph, source);
    return 0;
}
